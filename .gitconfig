[user]
	name = Kevin CantÃº
	email = kevincantu@gmail.com

[color]
	ui = true

[core]
	autocrlf = false # when true, converts to CRLF on checkout

	#editor = gvim --nofork
	#editor = gvim.bat --nofork
	#editor = atom --wait

	# speedups
	preloadindex = true
	fscache = true
	#longPaths = true

	excludesfile = /Users/kevincantu/.gitignore_global

	ignoreCase = true # intentionally conflate MyFile.txt and myfile.txt

[gc]
	auto = 512 # gc very aggressively to avoid trouble later

[merge]
	conflictstyle = diff3

[diff]
	#compactionHeuristic = true
	noprefix = true

[alias]
	ll = log --decorate --graph --oneline
		# --show-signature
	lll = log --decorate --stat=120 --name-only
	llm = log --decorate --graph --pretty=medium --shortstat

	ammend-date = commit --amend --reset-author --no-edit
	amend-date = commit --amend --reset-author --no-edit

	diff-staged = diff --staged

	#clip = "!sh -c \"git rev-parse HEAD | clip\""
	clip = "!sh -c \"git rev-parse HEAD | pbcopy\""

	latest = for-each-ref --sort="-authordate:iso8601" --format="%(objectname:short)%20%(HEAD)%(refname:short)%09(%(authorname)%20%40%20%(authordate:relative))" refs/heads
		# --merged=origin/master
		# --no-merged=origin/master
	llatest = for-each-ref --sort="-authordate:iso8601" --format="%(authordate:iso8601)%20[%(objectname:short)]%20%(HEAD)%(refname:short)%09%40%20%(committername)" refs/heads

	rebase-eol = rebase --strategy=recursive --strategy-option=renormalize --strategy-option=ignore-space-at-eol
	cleanall = submodule foreach git clean -xfd

	# clear up branches which were squash-merged (so `branch -d` doesn't work)
	# e.g.: origin/master squash-merged-feature
	branchclear = "!sh -c \"f() { \
				git checkout $2 && git rebase	$1 && \
				git checkout $1 && git branch -d $2;	\
			}; f\""

	new-branch = "!sh -c \"f() { \
			git fetch origin && \
			git checkout origin/develop && \
			git checkout -b $1 && \
			git --no-pager log -1 --oneline --decorate; \
		}; f\""

	multi-arg-sample = "!sh -c \"f() { echo 'hello $1 -> $2'; }; f\""
	multi-line-sample = "!sh -c \"f() { \
				echo 'one' && \
				echo 'hello $1 -> $2'; \
			}; f\""

# nerf `git push`
#[push]
#	default = nothing

# specify bogus remotes (named "disallowed") so `git push` cannot push these branches
# (GitHub Desktop seems to ignore these and push to origin by name)
[branch "develop"]
	pushRemote = disallowed
[branch "master"]
	pushRemote = disallowed
[branch "stable"]
	pushRemote = disallowed
[branch "banana"]
	pushRemote = disallowed

[status]
	showUntrackedFiles = all
	relativePaths = false
	short = true
	branch = false

[transfer]
	# warning: for new clones of old-school repos use this:
	# git -c transfer.fsckobjects=false clone ...
	fsckobjects = true

[advice]
	detachedHead = false

################################################
## AUTOMATED STUFF BELOW THIS
################################################
